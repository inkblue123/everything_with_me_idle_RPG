import { is_Empty_Object } from '../Function/Function.js';
import { addElement } from '../Function/Dom_function.js';
import { updata_BP_value } from '../Function/Updata_func.js';
import { game_events } from '../Data/Game_event/Game_Event.js';
import { enums } from '../Data/Enum/Enum.js';
import { texts } from '../Data/Text/Text.js';
import { global } from './global_class.js';
import { player } from '../Player/Player.js';

//游戏事件类
export class Game_event_manage {
    constructor() {}
    init() {
        this.now_event_id = null; //当前进行的事件id
        this.event_start_place; //当前进行的事件的启动地点
        this.monitor_data = new Object(); //需要监控的行为的监控数值
        this.monitor_target = new Object(); //需要监控的行为以及目标数值
        this.mini_event_button_flag = new Object(); //迷你事件的按键情况记录
    }

    //启动迷你事件
    start_mini_event(event_id) {
        //判断该事件是否满足启动条件
        let ret = this.check_mini_event_start(event_id);
        if (ret != 'start') {
            //事件不能启动
            this.end_mini_event(event_id, ret);
            return;
        }
        // 获取玩家控制界面
        let control = document.getElementById('control');
        //展示新地点的内容
        control.show_mini_event_process(event_id, 'first');
    }

    //玩家在迷你事件的一个流程中点击了一个按钮，更新迷你事件
    updata_mini_event(event_id, now_process_id, button_id) {
        //获取当前迷你事件的所处流程
        let now_process = game_events[event_id].process[now_process_id];
        let click_button = now_process.button[button_id];

        //如果这个按钮有要做的事
        if (!is_Empty_Object(click_button.thing)) {
            this.handle_button_thing(click_button);
        }
        //如果这个按钮是进入下一流程的按钮
        if (click_button.click_type == 'next_process') {
            let next_process_id = click_button.next;
            if (next_process_id == 'end') {
                //下一流程是结束流程，进入结束的函数
                this.end_mini_event(event_id, 'finish');
            } else {
                //正常进入下一流程
                let control = document.getElementById('control');
                control.show_mini_event_process(event_id, next_process_id);
            }
        } else if (click_button.click_type == 'chat') {
            this.set_mini_event_button_click();
        }
    }

    //记录按下了迷你事件中的一个按钮
    set_mini_event_button_click(event_id, now_process_id, button_id) {
        let now_process = game_events[event_id].process[now_process_id];
        //记录这个按键
        this.mini_event_button_flag[button_id] = true;
        //重新展示当前流程
        control.show_mini_event_process(event_id, now_process_id, button_id);
    }

}
