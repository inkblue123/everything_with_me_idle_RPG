通用数据结构幻想

所有战斗都在某个场景

场景存了n个怪物编号，n个场景效果
怪物登场有条件，比如同场怪物数量上限，当前时间、、

为了通用或许也不一定要把场景和怪物参数绑定
这个信息可以做成固定游戏数据，
副本A中存储场景信息，怪物信息，掉落物信息，通关后事件编号

副本A本身只是一个结构体，是通过这个结构体内部的参数来生成战斗区域和相关内容的




为想新技能和写程序的偷懒的设想
技能分被动和主动，之前设想的主要是被动
对于每个主动技能，有着基本的几个要素

激活条件
技能一般没有条件，拥有这个技能本身就是最大的条件，最多有个cd
但是有些可以设置额外的条件，比如概率激活、绑定在装备上、某某状态下允许使用

技能的代价
使用主动技能之后，消耗某某资源，比如精力，蓝，血，或者背包物品，
或者技能期间持续消耗，
或者技能结束之后再支付

技能效果的基础
基于玩家某某属性，计算出主动技能生效之后的具体效果，比如造成的伤害值，增加的防御，
一般来说主动技能初始是基于一个属性的，也可以基于多个属性，基于红绿蓝资源，基于某被动技能等级

技能的具体效果
一般是和技能本身绑定的，就是各个技能各不相同，不然就变成换皮了
但是有些大类的技能还是不可避免的很相似，

比如攻击类型的技能，无非就是物理或者魔法或者元素（如果有的话）
打击近距离|中距离|远距离，或者都打
打1打n
造成1次伤害，造成n次伤害

辅助类型的，
给自己的有临时加成面板属性，临时恢复资源，获得某某buff
给敌人的就反过来削弱

一个技能大概就是由激活条件、代价、效果基础、具体效果组成的
为了往游戏里塞更多的技能，想法是让每个技能可以“升级”
比如设计火球术A，火球术B，火球术C
学完都是可以习得火球术这个技能（激活条件共用）
但是对于A，使用需要消耗1蓝，B需要用1个火球符文，C需要处于80%精力以上允许使用（多种使用代价）
A基于灵魂属性造成伤害，B基于技巧属性造成伤害，C基于精力属性造成伤害（不同的效果基础，同也没关系，可以增加倍率）
A对中距离敌人造成伤害，B对近距离敌人造成高伤害，C对近距离敌人造成两次伤害

那么如果真的这么设计三个火球技能，这就很换皮，不够有意思，后期也用不到这块代码了，挺浪费的
不如设计一个火球技能，把刚刚提到的要素全都融合进去，根据学到的不同技能，解锁对应的要素

比如开始只学到了A，那就是一个普通的火球
后来学到了B，原本的火球就升级了，可以同时基于两种属性来造成伤害，可以同时攻击中近距离敌人，还可以在没蓝的时候使用火球符文代替消耗
再后面学到了C，又变得更强

技能在一开始设计的时候就设计最强的状态，给玩家用的是加了很多个限制条件的版本
重复学习的过程就是解开各个限制的过程，这个学习顺序可以随意调换，就是各个锁先后解开的区别而已
这样一个主动技能就可以拆成很多个技能书，玩家玩到的时候获取技能书的顺序不同，玩到的感觉也不一样

在这个基础上换皮就高效多了（）
小火球，大火球，巨大火球，只要最终版本的差别大一些，基础版本相似也没关系，
玩家会在变强的过程中使用喜欢的那一种，而且可能后面小火球还比巨大火球更强，再又随着游戏进展而变化

代码会不会很复杂（）
至少数值很难设计



















